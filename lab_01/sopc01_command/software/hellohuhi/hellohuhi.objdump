
hellohuhi.elf:     file format elf32-littlenios2
hellohuhi.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000004fc memsz 0x000004fc flags r-x
    LOAD off    0x0000151c vaddr 0x0000451c paddr 0x00004590 align 2**12
         filesz 0x00000074 memsz 0x00000074 flags rw-
    LOAD off    0x00001604 vaddr 0x00004604 paddr 0x00004604 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000004c0  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  000044e0  000044e0  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000074  0000451c  00004590  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00004604  00004604  00001604  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000208  00000000  00000000  000015b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002e5  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000161e  00000000  00000000  00001aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000986  00000000  00000000  000030c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002428  00000000  00000000  00003a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000025c  00000000  00000000  00005e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000007ff  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000003fc  00000000  00000000  000068cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00006ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00006ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00007d0f  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00007d12  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00007d1e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00007d1f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00007d20  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00007d24  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00007d28  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  00007d2c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  00007d32  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  00007d38  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00007d3e  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000014  00000000  00000000  00007d42  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0002aa9b  00000000  00000000  00007d56  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
000044e0 l    d  .rodata	00000000 .rodata
0000451c l    d  .rwdata	00000000 .rwdata
00004604 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
000040ec l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000044ac l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00004178 g     F .text	0000002c alt_main
00004590 g       *ABS*	00000000 __flash_rwdata_start
00004338 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00004610 g     O .bss	00000004 errno
00004608 g     O .bss	00000004 alt_argv
0000c574 g       *ABS*	00000000 _gp
00004544 g     O .rwdata	00000030 alt_fd_list
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004588 g     O .rwdata	00000004 alt_max_fd
00004614 g       *ABS*	00000000 __bss_end
000040a8 g     F .text	00000044 alt_getchar
0000451c g     O .rwdata	00000028 alt_dev_null
000044a8 g     F .text	00000004 alt_dcache_flush_all
00004590 g       *ABS*	00000000 __ram_rwdata_end
00004580 g     O .rwdata	00000008 alt_dev_list
0000451c g       *ABS*	00000000 __ram_rodata_end
00004614 g       *ABS*	00000000 end
00004414 g     F .text	00000094 altera_avalon_uart_write
00006004 g       *ABS*	00000000 __alt_stack_pointer
000041a4 g     F .text	00000144 alt_printf
00004020 g     F .text	0000003c _start
00004370 g     F .text	00000004 alt_sys_init
0000451c g       *ABS*	00000000 __ram_rwdata_start
000044e0 g       *ABS*	00000000 __ram_rodata_start
00004614 g       *ABS*	00000000 __alt_stack_base
00004604 g       *ABS*	00000000 __bss_start
0000405c g     F .text	0000004c main
0000460c g     O .bss	00000004 alt_envp
00004574 g     O .rwdata	00000004 uart_0
0000458c g     O .rwdata	00000004 alt_errno
000044e0 g       *ABS*	00000000 __flash_rodata_start
00004374 g     F .text	00000020 alt_irq_init
00004604 g     O .bss	00000004 alt_argc
00004578 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004590 g       *ABS*	00000000 _edata
00004614 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000044b8 g     F .text	00000008 altera_nios2_qsys_irq_init
0000400c g       .entry	00000000 exit
00006004 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
000044c0 g     F .text	00000020 strlen
000042e8 g     F .text	00000050 alt_putchar
000044b4 g     F .text	00000004 alt_icache_flush_all
00004394 g     F .text	00000080 altera_avalon_uart_read
0000410c g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	ded80114 	ori	sp,sp,24580

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b15d14 	ori	gp,gp,50548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10918114 	ori	r2,r2,17924

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d18514 	ori	r3,r3,17940

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	000410c0 	call	410c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041780 	call	4178 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
#include"system.h"
#include"altera_avalon_sysid_qsys.h"
#include"altera_avalon_sysid_qsys_regs.h"

int main()
{ 
    405c:	deffff04 	addi	sp,sp,-4
	char ch;
	alt_putstr("Hello from System on Chip\n");
    4060:	01000034 	movhi	r4,0
    4064:	21113804 	addi	r4,r4,17632
#include"system.h"
#include"altera_avalon_sysid_qsys.h"
#include"altera_avalon_sysid_qsys_regs.h"

int main()
{ 
    4068:	dfc00015 	stw	ra,0(sp)
	char ch;
	alt_putstr("Hello from System on Chip\n");
    406c:	00043380 	call	4338 <alt_putstr>
	alt_putstr("Send any character\n");
    4070:	01000034 	movhi	r4,0
    4074:	21113ec4 	addi	r4,r4,17659
    4078:	00043380 	call	4338 <alt_putstr>
	alt_printf("%x", IORD_ALTERA_AVALON_SYSID_QSYS_ID(SYSID_QSYS_0_BASE));
    407c:	00a41214 	movui	r2,36936
    4080:	11400037 	ldwio	r5,0(r2)
    4084:	01000034 	movhi	r4,0
    4088:	211143c4 	addi	r4,r4,17679
    408c:	00041a40 	call	41a4 <alt_printf>
	/* Event loop never exits. */
	while (1)
	{
		ch=alt_getchar();
    4090:	00040a80 	call	40a8 <alt_getchar>
		alt_putchar(ch);
    4094:	11003fcc 	andi	r4,r2,255
    4098:	2100201c 	xori	r4,r4,128
    409c:	213fe004 	addi	r4,r4,-128
    40a0:	00042e80 	call	42e8 <alt_putchar>
    40a4:	003ffa06 	br	4090 <main+0x34>

000040a8 <alt_getchar>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    40a8:	00800034 	movhi	r2,0
    40ac:	10915104 	addi	r2,r2,17732
    40b0:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    40b4:	defffe04 	addi	sp,sp,-8
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    40b8:	01000034 	movhi	r4,0
    40bc:	21115d04 	addi	r4,r4,17780
    40c0:	d80b883a 	mov	r5,sp
    40c4:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    40c8:	dfc00115 	stw	ra,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    40cc:	00043940 	call	4394 <altera_avalon_uart_read>
    40d0:	00ffffc4 	movi	r3,-1
    40d4:	0080010e 	bge	zero,r2,40dc <alt_getchar+0x34>
        return -1;
    }
    return c;
    40d8:	d8c00007 	ldb	r3,0(sp)
#else
    return getchar();
#endif
}
    40dc:	1805883a 	mov	r2,r3
    40e0:	dfc00117 	ldw	ra,4(sp)
    40e4:	dec00204 	addi	sp,sp,8
    40e8:	f800283a 	ret

000040ec <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    40ec:	2900051e 	bne	r5,r4,4104 <alt_load_section+0x18>
    40f0:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    40f4:	20800017 	ldw	r2,0(r4)
    40f8:	21000104 	addi	r4,r4,4
    40fc:	28800015 	stw	r2,0(r5)
    4100:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4104:	29bffb1e 	bne	r5,r6,40f4 <alt_load_section+0x8>
    4108:	f800283a 	ret

0000410c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    410c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4110:	01000034 	movhi	r4,0
    4114:	21116404 	addi	r4,r4,17808
    4118:	01400034 	movhi	r5,0
    411c:	29514704 	addi	r5,r5,17692
    4120:	01800034 	movhi	r6,0
    4124:	31916404 	addi	r6,r6,17808
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4128:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    412c:	00040ec0 	call	40ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4130:	01000034 	movhi	r4,0
    4134:	21100804 	addi	r4,r4,16416
    4138:	01400034 	movhi	r5,0
    413c:	29500804 	addi	r5,r5,16416
    4140:	01800034 	movhi	r6,0
    4144:	31900804 	addi	r6,r6,16416
    4148:	00040ec0 	call	40ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    414c:	01000034 	movhi	r4,0
    4150:	21113804 	addi	r4,r4,17632
    4154:	01400034 	movhi	r5,0
    4158:	29513804 	addi	r5,r5,17632
    415c:	01800034 	movhi	r6,0
    4160:	31914704 	addi	r6,r6,17692
    4164:	00040ec0 	call	40ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4168:	00044a80 	call	44a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    416c:	dfc00017 	ldw	ra,0(sp)
    4170:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4174:	00044b41 	jmpi	44b4 <alt_icache_flush_all>

00004178 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4178:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    417c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4180:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4184:	00043740 	call	4374 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4188:	00043700 	call	4370 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    418c:	d1202417 	ldw	r4,-32624(gp)
    4190:	d1602517 	ldw	r5,-32620(gp)
    4194:	d1a02617 	ldw	r6,-32616(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4198:	dfc00017 	ldw	ra,0(sp)
    419c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    41a0:	000405c1 	jmpi	405c <main>

000041a4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    41a4:	defff804 	addi	sp,sp,-32
    41a8:	dfc00415 	stw	ra,16(sp)
    41ac:	dc800315 	stw	r18,12(sp)
    41b0:	dc400215 	stw	r17,8(sp)
    41b4:	dc000115 	stw	r16,4(sp)
    41b8:	d9400515 	stw	r5,20(sp)
    41bc:	d9800615 	stw	r6,24(sp)
    41c0:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    41c4:	d8800504 	addi	r2,sp,20
    41c8:	2025883a 	mov	r18,r4
    41cc:	d8800015 	stw	r2,0(sp)
    41d0:	00003d06 	br	42c8 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    41d4:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    41d8:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    41dc:	18800226 	beq	r3,r2,41e8 <alt_printf+0x44>
        {
            alt_putchar(c);
    41e0:	1809883a 	mov	r4,r3
    41e4:	00000a06 	br	4210 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    41e8:	91000007 	ldb	r4,0(r18)
    41ec:	94800044 	addi	r18,r18,1
    41f0:	20003726 	beq	r4,zero,42d0 <alt_printf+0x12c>
            {
                if (c == '%')
    41f4:	20c00626 	beq	r4,r3,4210 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    41f8:	008018c4 	movi	r2,99
    41fc:	2080061e 	bne	r4,r2,4218 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    4200:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    4204:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    4208:	10800104 	addi	r2,r2,4
    420c:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    4210:	00042e80 	call	42e8 <alt_putchar>
    4214:	00002c06 	br	42c8 <alt_printf+0x124>
                }
                else if (c == 'x')
    4218:	00801e04 	movi	r2,120
    421c:	20801e1e 	bne	r4,r2,4298 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    4220:	d8800017 	ldw	r2,0(sp)
    4224:	14400017 	ldw	r17,0(r2)
    4228:	10800104 	addi	r2,r2,4
    422c:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    4230:	88000226 	beq	r17,zero,423c <alt_printf+0x98>
    4234:	04000704 	movi	r16,28
    4238:	00000306 	br	4248 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    423c:	01000c04 	movi	r4,48
    4240:	003ff306 	br	4210 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    4244:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    4248:	008003c4 	movi	r2,15
    424c:	1404983a 	sll	r2,r2,r16
    4250:	8884703a 	and	r2,r17,r2
    4254:	103ffb26 	beq	r2,zero,4244 <alt_printf+0xa0>
    4258:	00000b06 	br	4288 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    425c:	8884703a 	and	r2,r17,r2
    4260:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    4264:	00800244 	movi	r2,9
                            c = '0' + digit;
    4268:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    426c:	10c0012e 	bgeu	r2,r3,4274 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    4270:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    4274:	21003fcc 	andi	r4,r4,255
    4278:	2100201c 	xori	r4,r4,128
    427c:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4280:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    4284:	00042e80 	call	42e8 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    4288:	008003c4 	movi	r2,15
    428c:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4290:	803ff20e 	bge	r16,zero,425c <alt_printf+0xb8>
    4294:	00000c06 	br	42c8 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    4298:	00801cc4 	movi	r2,115
    429c:	20800a1e 	bne	r4,r2,42c8 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    42a0:	d8800017 	ldw	r2,0(sp)
    42a4:	14000017 	ldw	r16,0(r2)
    42a8:	10800104 	addi	r2,r2,4
    42ac:	d8800015 	stw	r2,0(sp)
    42b0:	00000106 	br	42b8 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    42b4:	00042e80 	call	42e8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    42b8:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    42bc:	84000044 	addi	r16,r16,1
    42c0:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    42c4:	103ffb1e 	bne	r2,zero,42b4 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    42c8:	90c00007 	ldb	r3,0(r18)
    42cc:	183fc11e 	bne	r3,zero,41d4 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    42d0:	dfc00417 	ldw	ra,16(sp)
    42d4:	dc800317 	ldw	r18,12(sp)
    42d8:	dc400217 	ldw	r17,8(sp)
    42dc:	dc000117 	ldw	r16,4(sp)
    42e0:	dec00804 	addi	sp,sp,32
    42e4:	f800283a 	ret

000042e8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    42e8:	defffd04 	addi	sp,sp,-12
    42ec:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    42f0:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    42f4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    42f8:	01800044 	movi	r6,1
    42fc:	01000034 	movhi	r4,0
    4300:	21115d04 	addi	r4,r4,17780
    4304:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    4308:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    430c:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    4310:	00044140 	call	4414 <altera_avalon_uart_write>
    4314:	1009883a 	mov	r4,r2
    4318:	00bfffc4 	movi	r2,-1
    431c:	2080011e 	bne	r4,r2,4324 <alt_putchar+0x3c>
    4320:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    4324:	8005883a 	mov	r2,r16
    4328:	dfc00217 	ldw	ra,8(sp)
    432c:	dc000117 	ldw	r16,4(sp)
    4330:	dec00304 	addi	sp,sp,12
    4334:	f800283a 	ret

00004338 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4338:	defffe04 	addi	sp,sp,-8
    433c:	dc000015 	stw	r16,0(sp)
    4340:	dfc00115 	stw	ra,4(sp)
    4344:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4348:	00044c00 	call	44c0 <strlen>
    434c:	800b883a 	mov	r5,r16
    4350:	100d883a 	mov	r6,r2
    4354:	01000034 	movhi	r4,0
    4358:	21115d04 	addi	r4,r4,17780
    435c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    4360:	dfc00117 	ldw	ra,4(sp)
    4364:	dc000017 	ldw	r16,0(sp)
    4368:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    436c:	00044141 	jmpi	4414 <altera_avalon_uart_write>

00004370 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
    4370:	f800283a 	ret

00004374 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4374:	deffff04 	addi	sp,sp,-4
    4378:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    437c:	00044b80 	call	44b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4380:	00800044 	movi	r2,1
    4384:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4388:	dfc00017 	ldw	ra,0(sp)
    438c:	dec00104 	addi	sp,sp,4
    4390:	f800283a 	ret

00004394 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    4394:	deffff04 	addi	sp,sp,-4
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    4398:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    439c:	dfc00015 	stw	ra,0(sp)
    43a0:	380f003a 	cmpeq	r7,r7,zero

  block = !(flags & O_NONBLOCK);

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    43a4:	20800017 	ldw	r2,0(r4)
    43a8:	10c00237 	ldwio	r3,8(r2)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    43ac:	10000235 	stwio	zero,8(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    43b0:	1880200c 	andi	r2,r3,128
    43b4:	10000526 	beq	r2,zero,43cc <altera_avalon_uart_read+0x38>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    43b8:	20800017 	ldw	r2,0(r4)
    43bc:	10800037 	ldwio	r2,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    43c0:	18c000cc 	andi	r3,r3,3

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    43c4:	28800005 	stb	r2,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    43c8:	18000826 	beq	r3,zero,43ec <altera_avalon_uart_read+0x58>
      {
        return 1;
      }
    }
  }
  while (block);
    43cc:	383ff51e 	bne	r7,zero,43a4 <altera_avalon_uart_read+0x10>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    43d0:	00800034 	movhi	r2,0
    43d4:	10916304 	addi	r2,r2,17804
    43d8:	10800017 	ldw	r2,0(r2)
    43dc:	1000051e 	bne	r2,zero,43f4 <altera_avalon_uart_read+0x60>
    43e0:	00c00034 	movhi	r3,0
    43e4:	18d18404 	addi	r3,r3,17936
    43e8:	00000406 	br	43fc <altera_avalon_uart_read+0x68>

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    43ec:	00800044 	movi	r2,1
    43f0:	00000506 	br	4408 <altera_avalon_uart_read+0x74>
    43f4:	103ee83a 	callr	r2
    43f8:	1007883a 	mov	r3,r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    43fc:	008002c4 	movi	r2,11
    4400:	18800015 	stw	r2,0(r3)
    4404:	0005883a 	mov	r2,zero
 
  return 0;
}
    4408:	dfc00017 	ldw	ra,0(sp)
    440c:	dec00104 	addi	sp,sp,4
    4410:	f800283a 	ret

00004414 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    4414:	defffd04 	addi	sp,sp,-12
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    4418:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    441c:	dc400115 	stw	r17,4(sp)
    4420:	dc000015 	stw	r16,0(sp)
    4424:	dfc00215 	stw	ra,8(sp)
    4428:	3023883a 	mov	r17,r6
    442c:	380ec03a 	cmpne	r7,r7,zero
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    4430:	3021883a 	mov	r16,r6
  count = len;

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    4434:	20c00017 	ldw	r3,0(r4)
    4438:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    443c:	1080100c 	andi	r2,r2,64
    4440:	10000426 	beq	r2,zero,4454 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    4444:	28800007 	ldb	r2,0(r5)
    4448:	29400044 	addi	r5,r5,1
    444c:	18800135 	stwio	r2,4(r3)
      count--;
    4450:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
    4454:	3800021e 	bne	r7,zero,4460 <altera_avalon_uart_write+0x4c>
    4458:	80000d26 	beq	r16,zero,4490 <altera_avalon_uart_write+0x7c>
    445c:	003ff506 	br	4434 <altera_avalon_uart_write+0x20>

  if (count)
    4460:	80000b26 	beq	r16,zero,4490 <altera_avalon_uart_write+0x7c>
    4464:	00800034 	movhi	r2,0
    4468:	10916304 	addi	r2,r2,17804
    446c:	10800017 	ldw	r2,0(r2)
    4470:	1000031e 	bne	r2,zero,4480 <altera_avalon_uart_write+0x6c>
    4474:	00c00034 	movhi	r3,0
    4478:	18d18404 	addi	r3,r3,17936
    447c:	00000206 	br	4488 <altera_avalon_uart_write+0x74>
    4480:	103ee83a 	callr	r2
    4484:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EWOULDBLOCK;
    4488:	008002c4 	movi	r2,11
    448c:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
}
    4490:	8c05c83a 	sub	r2,r17,r16
    4494:	dfc00217 	ldw	ra,8(sp)
    4498:	dc400117 	ldw	r17,4(sp)
    449c:	dc000017 	ldw	r16,0(sp)
    44a0:	dec00304 	addi	sp,sp,12
    44a4:	f800283a 	ret

000044a8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    44a8:	f800283a 	ret

000044ac <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    44ac:	3005883a 	mov	r2,r6
    44b0:	f800283a 	ret

000044b4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    44b4:	f800283a 	ret

000044b8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    44b8:	000170fa 	wrctl	ienable,zero
}
    44bc:	f800283a 	ret

000044c0 <strlen>:
    44c0:	20800007 	ldb	r2,0(r4)
    44c4:	10000526 	beq	r2,zero,44dc <strlen+0x1c>
    44c8:	2007883a 	mov	r3,r4
    44cc:	18c00044 	addi	r3,r3,1
    44d0:	18800007 	ldb	r2,0(r3)
    44d4:	103ffd1e 	bne	r2,zero,44cc <strlen+0xc>
    44d8:	1905c83a 	sub	r2,r3,r4
    44dc:	f800283a 	ret
